{"version":3,"sources":["webpack://typescriptlang-org/./src/components/index/UpcomingReleaseMeta.tsx","webpack://typescriptlang-org/./src/pages/upcoming.tsx"],"names":["UpcomingReleaseMeta","intl","useIntl","i","createInternational","startDate","Date","releasePlan","betaDate","rcDate","endDate","today","failed","date","filter","d","Error","join","validateDates","oneDay","diffTotalDays","Math","round","abs","diffToBetaDays","diffToRCDays","diffToToday","needlePerc","releaseParts","formatDateToParts","month","day","betaParts","rcParts","shipParts","shipMsg","href","releaseMsg","withPrefix","releaseInfo","betaMsg","rcMsg","className","map","p","value","style","left","display","Index","props","betaDateString","rcDateString","shipDateString","metaDescription","title","description","lang","id","marginTop","Intl","locale"],"mappings":"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","file":"component---src-pages-upcoming-tsx-1e00a0a80ce0c333a099.js","sourcesContent":["import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\n\n// Automatic metadata from npm and VS Marketplace\nimport releaseInfo from \"../../lib/release-info.json\"\n// Manual input of dates\nimport releasePlan from \"../../lib/release-plan.json\"\n\nimport { createInternational } from \"../../lib/createInternational\"\nimport { useIntl } from \"react-intl\"\nimport { indexCopy } from \"../../copy/en/index.js\"\n\n/**\n * Shows the current versions, and upcoming releases\n */\nexport const UpcomingReleaseMeta = () => {\n  const intl = useIntl()\n\n  const i = createInternational<typeof indexCopy>(intl)\n\n  const startDate = new Date(releasePlan.last_release_date)\n  const betaDate = new Date(releasePlan.upcoming_beta_date)\n  const rcDate = new Date(releasePlan.upcoming_rc_date)\n  const endDate = new Date(releasePlan.upcoming_release_date)\n\n  // const today = new Date(\"04/30/2020\")\n  const today = new Date()\n\n  validateDates(startDate, betaDate, rcDate, endDate)\n\n  // it's an approximation, but we don't need fidelity on a 300px wide bar\n  const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n  const diffTotalDays = Math.round(Math.abs(((+startDate) - (+endDate)) / oneDay));\n  const diffToBetaDays = Math.round(Math.abs(((+startDate) - (+betaDate)) / oneDay));\n  const diffToRCDays = Math.round(Math.abs(((+startDate) - (+rcDate)) / oneDay));\n  const diffToToday = Math.round(Math.abs(((+startDate) - (+today)) / oneDay));\n\n  let needlePerc = -1\n  // is after release || somehow ended up negative\n  if (diffToToday > diffTotalDays || diffToToday < 0) {\n    // uh oh, we need to update the release-plan.json\n    // so NOOP to leave at -1\n  } else if (diffToToday < diffToBetaDays) {\n    // It's in the first bit, so x% of 0 - 55%\n    const onePerc = 55 / 100;\n    needlePerc = ((diffToToday / diffToBetaDays) * onePerc) * 100\n  } else if (diffToToday < diffToRCDays) {\n    // It's in the second bit, so x% of 55 - 83%\n    const onePerc = (83 - 55) / 100;\n    needlePerc = ((onePerc * (diffToToday / diffToRCDays)) * 100) + 55\n  } else {\n    // must be in the final section\n    const onePerc = 17 / 100;\n    needlePerc = ((onePerc * (diffToToday / diffTotalDays)) * 100) + 83\n  }\n\n  const releaseParts = intl.formatDateToParts(startDate, { month: \"short\", day: \"numeric\" })\n  const betaParts = intl.formatDateToParts(betaDate, { month: \"short\", day: \"numeric\" })\n  const rcParts = intl.formatDateToParts(rcDate, { month: \"short\", day: \"numeric\" })\n  const shipParts = intl.formatDateToParts(endDate, { month: \"short\", day: \"numeric\" })\n\n  const shipMsg = <a href={releasePlan.iteration_plan_url}>{releasePlan.upcoming_version}</a>\n  const releaseMsg = <a href={withPrefix(releaseInfo.releaseNotesURL)}>{i(\"index_releases_released\")}</a>\n  const betaMsg = !releaseInfo.isBeta ? <span>{i(\"index_releases_beta\")}</span> : <a href={releaseInfo.betaPostURL}>{i(\"index_releases_beta\")}</a>\n  const rcMsg = !releaseInfo.isRC ? <span>{i(\"index_releases_rc\")}</span> : <a href={releaseInfo.rcPostURL}>{i(\"index_releases_rc\")}</a>\n\n  return (\n    <div className=\"grey-box last\">\n      <p>{i(\"index_releases_pt1\")} {shipMsg}{i(\"index_releases_pt2\")} {shipParts.map(p => p.value).join('')}</p>\n      <div className=\"release-info\">\n        <div className=\"needle\" style={{ left: needlePerc + \"%\", display: needlePerc === -1 ? \"none\" : \"block\" }} />\n        <div className=\"needle-head\" style={{ left: needlePerc + \"%\", display: needlePerc === -1 ? \"none\" : \"block\" }} />\n        <div className=\"release\">\n          <div>\n            <div className=\"separator\" />\n            <div className=\"bar\" />\n          </div>\n          <p>{releaseInfo.tags.stableMajMin} {releaseMsg}<br />{releaseParts.map(p => p.value).join('')}</p>\n        </div>\n        <div className=\"beta\">\n          <div>\n            <div className=\"separator\" />\n            <div className=\"bar\" />\n          </div>\n          <p>{releasePlan.upcoming_version} {betaMsg}<br />{betaParts.map(p => p.value).join('')}</p>\n        </div>\n        <div className=\"rc\">\n          <div>\n            <div className=\"separator\" />\n            <div className=\"bar\" />\n          </div>\n          <p>{releasePlan.upcoming_version} {rcMsg}<br />{rcParts.map(p => p.value).join('')}</p>\n        </div>\n      </div>\n    </div>)\n}\n\n\nfunction validateDates(startDate: Date, betaDate: Date, rcDate: Date, endDate: Date) {\n  if (!startDate || !betaDate || !rcDate || !endDate) {\n    const dates = [\n      { \"name\": \"startDate\", date: startDate },\n      { \"name\": \"betaDate\", date: betaDate },\n      { \"name\": \"rcDate\", date: rcDate },\n      { \"name\": \"releaseDate\", date: releasePlan }\n    ]\n    const failed = dates.filter(d => d instanceof Date)\n    throw new Error(`Dates in release-plan.json can't be converted into JS dates: ${failed.join(\" - \")}`)\n  }\n}\n\n","import * as React from \"react\"\nimport { Layout } from \"../components/layout\"\n\nimport { Intl } from \"../components/Intl\"\nimport { UpcomingReleaseMeta } from \"../components/index/UpcomingReleaseMeta\"\nimport { useIntl } from \"react-intl\"\n\nimport \"../templates/pages/css/index.scss\"\n\nimport releasePlan from \"../lib/release-plan.json\"\n\nconst Index: React.FC<{}> = (props) => {\n  const intl = useIntl()\n  const today = new Date()\n\n  const startDate = new Date(releasePlan.last_release_date)\n  const betaDate = new Date(releasePlan.upcoming_beta_date)\n  const rcDate = new Date(releasePlan.upcoming_rc_date)\n  const endDate = new Date(releasePlan.upcoming_release_date)\n\n  // it's an approximation, but we don't need fidelity on a 300px wide bar\n  const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n  const diffTotalDays = Math.round(Math.abs(((+startDate) - (+endDate)) / oneDay));\n  const diffToBetaDays = Math.round(Math.abs(((+startDate) - (+betaDate)) / oneDay));\n  const diffToRCDays = Math.round(Math.abs(((+startDate) - (+rcDate)) / oneDay));\n  const diffToToday = Math.round(Math.abs(((+startDate) - (+today)) / oneDay));\n\n  const betaDateString = intl.formatDateToParts(betaDate, { month: \"short\", day: \"numeric\" }).map(p => p.value).join('')\n  const rcDateString = intl.formatDateToParts(rcDate, { month: \"short\", day: \"numeric\" }).map(p => p.value).join('')\n  const shipDateString = intl.formatDateToParts(endDate, { month: \"short\", day: \"numeric\" }).map(p => p.value).join('')\n\n  // Update the meta description (so you don't need to click through) on a new build\n  let metaUpcoming = \"\"\n  if (diffToToday > diffTotalDays || diffToToday < 0) {\n    metaUpcoming = \"Preparing details for the next release\"\n  } else if (diffToToday < diffToBetaDays) {\n    metaUpcoming = `${releasePlan.upcoming_version} Beta on ${betaDateString}`\n  } else if (diffToToday < diffToRCDays) {\n    metaUpcoming = `${releasePlan.upcoming_version} RC on ${rcDateString}`\n  } else {\n    metaUpcoming = `${releasePlan.upcoming_version} Final release on ${shipDateString}`\n  }\n\n  const metaDescription = `Up next: ${metaUpcoming}`\n\n  return (\n    <>\n      <Layout title=\"Release Cycle\" description={metaDescription} lang=\"en\">\n        <div id=\"upcoming\">\n          <div className=\"raised content main-content-block\">\n            <div className=\"split-fivehundred\">\n              <h1 style={{ marginTop: \"20px\" }}>Release Cycle</h1>\n              <div id='index'>\n                <UpcomingReleaseMeta />\n              </div>\n            </div>\n          </div>\n        </div>\n      </Layout>\n    </>\n  )\n}\n\n\nexport default (props: {}) => <Intl locale=\"en\"><Index {...props} /></Intl>\n\n"],"sourceRoot":""}